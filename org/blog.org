#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: blog/

* Emacs

** New Toy: ox-hugo
   :PROPERTIES:
   :EXPORT_FILE_NAME: first-ox-hugo
   :EXPORT_DATE: 2018-12-04
   :END:

   I've recently fallen into a very deep Emacs-filled rabbit hole. It
   started with the goal of cleaning up my Emacs =init.el= file, but
   expanded to learning more Emacs Lisp and trying to get more out of
   Org-mode. Now I'm typing this post in Org-mode with a new toy:
   [[https://ox-hugo.scripter.co/][=ox-hugo=]]. This Emacs package makes it easy to create blog posts
   from a single Org-file by seamlessly exporting second level
   headlines to Hugo's Markdown syntax.

   Setting up =ox-hugo= was incredibly easy. With MELPA already
   configured, the only required addition to my init file was this:
   #+BEGIN_SRC emacs-lisp :results silent
     (use-package ox-hugo
       :ensure t
       :after ox)
   #+END_SRC
   Now, in the buffer I'm currently editing, I use the key-binding
   =C-c C-e H H= to export a ready-to-go markdown file for Hugo to
   parse.

   Luckily before I fell down the =ox-hugo= rabbit hole my Emacs
   configuration was already cleaned up to my liking, hopefully it
   stays that way for a while! It can be found [[https://github.com/drdavis/dotfiles/blob/master/emacs/emacs-init.org][right here]] (you'll see
   it's also written in Org-mode, with the Emacs Lisp blocks loaded
   via =org-babel-load-file=).

** Eglot based Emacs Python IDE
   :PROPERTIES:
   :EXPORT_FILE_NAME: eglot-python-ide
   :EXPORT_DATE: 2018-12-05
   :END:

   In my Emacs rabbit hole I mentioned in my previous post, I decided
   to work on improving my Python development workflow. I recently
   found the [[https://github.com/joaotavora/eglot][Eglot]] package for running a [[https://microsoft.github.io/language-server-protocol/][LSP]] in Emacs.

   The most vanilla setup for Eglot is just =M-x eglot= in a buffer
   editing a python file. This works wonderfully if the executable for
   the [[https://github.com/palantir/python-language-server][Python Language Server]] (=pyls=) is found. This works because
   Eglot defines a list of server programs by default. You can see
   this list with =M-: eglot-server-programs=

*** Project Editing

    I have a few python virtual/Anaconda environments I like to work
    with. This is what =.dir-locals.el= is for:

    #+BEGIN_SRC emacs-lisp :results silent
      ((python-mode . ((eglot-server-programs    . ((python-mode "/path/to/env/bin/pyls")))
                       (python-shell-interpreter . "/path/to/env/bin/python")
                       (company-backends         . (company-capf))
                       )))
    #+END_SRC

    where =/path/to/env= is the path to a virtual environment or
    Anaconda environment (that of course has =python-language-server=
    installed). I also define the path to my Python executable for
    Emacs' builtin =python.el=. By default, =company-backends=
    includes =company-capf= for =completion-at-point=, but I want to
    make sure that's what is used because Eglot provides
    =completion-at-point=. Eglot also has =pyls= as a =python-mode=
    entry by default, but not to the virtual environment I want to
    use; this is why I manually define the list of server programs.

    When I open a buffer in the project I want to work in, I just call
    =M-x eglot= and I'm up and running.

*** Non-project Editing

    If I'm not editing in a project that has an associated virtual
    environment, I rely on some "sensible defaults" in my Emacs init
    file:

    #+BEGIN_SRC emacs-lisp :results silent
      (defvar ddavis-default-pyls "~/Software/Python/anaconda3/bin/pyls"
        "define a default pyls to be used")
    #+END_SRC

    This way I have a default =pyls= executable from my =base=
    Anaconda environment (which is potentially different on different
    machines). I then have a couple of functions to handle default
    Eglot python environments, where I:

    - Make =use-package= install Eglot if necessary.
    - Make sure =company-capf= is at the front of =company-backends=.
    - Make sure I add an Eglot server program entry pointing to my
      =base= Anaconda =pyls= to the front of the
      =eglot-server-programs= list.
    - Add the desired hook.

    #+BEGIN_SRC emacs-lisp :results silent
      (defun ddavis/python-eglot-enable ()
        "set variables and hook for eglot python IDE"
        (interactive)
        (use-package eglot
          :ensure t
          :config
          (require 'eglot))
        (setq company-backends
              (cons 'company-capf
                    (remove 'company-capf company-backends)))
        (add-to-list 'eglot-server-programs
                     `(python-mode ,ddavis-default-pyls))
        (add-hook 'python-mode-hook 'eglot-ensure))

      (defun ddavis/python-eglot-disable ()
        "remove hook for eglot python"
        (interactive)
        (remove-hook 'python-mode-hook 'eglot-ensure))
    #+END_SRC

    You can see that I just bring =company-capf= to the front of the
    =company-backends= list, and add my desired Anaconda based =pyls=
    to front of the =eglot-server-programs= list.
